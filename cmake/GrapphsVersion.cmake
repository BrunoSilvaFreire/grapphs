function(grapphs_detect_version VERSION_OUTPUT)

    set(GPP_VERSION "")
    execute_process(
            COMMAND ${Python_EXECUTABLE} ${CMAKE_SOURCE_DIR}/scripts/detect_version.py --json
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            RESULT_VARIABLE VERSION_RESULT
            OUTPUT_VARIABLE GPP_VERSION
    )
    string(JSON ${VERSION_OUTPUT}_MAJOR GET "${GPP_VERSION}" major)
    string(JSON ${VERSION_OUTPUT}_MINOR GET "${GPP_VERSION}" minor)
    string(JSON ${VERSION_OUTPUT}_PATCH GET "${GPP_VERSION}" patch)
    string(JSON ${VERSION_OUTPUT}_PRERELEASE GET "${GPP_VERSION}" prerelease)
    string(JSON ${VERSION_OUTPUT}_BUILD_METADATA GET "${GPP_VERSION}" build_metadata)
    string(JSON ${VERSION_OUTPUT}_RAW GET "${GPP_VERSION}" raw)

    set(${VERSION_OUTPUT}_MAJOR "${${VERSION_OUTPUT}_MAJOR}" PARENT_SCOPE)
    set(${VERSION_OUTPUT}_MINOR "${${VERSION_OUTPUT}_MINOR}" PARENT_SCOPE)
    set(${VERSION_OUTPUT}_PATCH "${${VERSION_OUTPUT}_PATCH}" PARENT_SCOPE)
    set(${VERSION_OUTPUT}_PRERELEASE "${${VERSION_OUTPUT}_PRERELEASE}" PARENT_SCOPE)
    set(${VERSION_OUTPUT}_BUILD_METADATA "${${VERSION_OUTPUT}_BUILD_METADATA}" PARENT_SCOPE)
    set(${VERSION_OUTPUT}_RAW "${${VERSION_OUTPUT}_RAW}" PARENT_SCOPE)
    set(${VERSION_OUTPUT} "${${VERSION_OUTPUT}_MAJOR}.${${VERSION_OUTPUT}_MINOR}.${${VERSION_OUTPUT}_PATCH}" PARENT_SCOPE)
endfunction()